# Generated by Django 5.1.5 on 2025-03-04 16:46

import backend.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Список категорий',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=60, unique=True, verbose_name='Код купона')),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Дата начала действия купона')),
                ('valid_to', models.DateTimeField(default=backend.models.default_valid_to, verbose_name='Дата окончания действия купона')),
                ('discount', models.IntegerField(help_text='В процентах от 0 до 100', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Скидка')),
                ('active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания купона')),
            ],
            options={
                'verbose_name': 'Скидочный купон',
                'verbose_name_plural': 'Список скидочных купонов',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название свойства')),
            ],
            options={
                'verbose_name': 'Свойство',
                'verbose_name_plural': 'Список свойств',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.TextField(choices=[('SL', 'Seller'), ('BR', 'Buyer')], default='BR', max_length=2, verbose_name='Тип пользователя')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('is_active', models.BooleanField(default=False)),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=80, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', backend.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Номер телефона')),
                ('country', models.CharField(blank=True, max_length=30, null=True, verbose_name='Страна')),
                ('city', models.CharField(blank=True, max_length=50, verbose_name='Город')),
                ('street', models.CharField(blank=True, max_length=60, verbose_name='Улица')),
                ('house', models.CharField(blank=True, max_length=20, verbose_name='Номер дома')),
                ('structure', models.CharField(blank=True, max_length=20, null=True, verbose_name='Корпус')),
                ('building', models.CharField(blank=True, max_length=20, null=True, verbose_name='Строение')),
                ('apartment', models.CharField(blank=True, max_length=20, verbose_name='Квартира')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Контакты пользователя',
                'verbose_name_plural': 'Список контактов пользователей',
            },
        ),
        migrations.CreateModel(
            name='EmailTokenConfirm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('key', models.CharField(db_index=True, max_length=80, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='confirm_email_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Токен для подтверждения email',
                'verbose_name_plural': 'Токены для подтверждения email',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания заказа')),
                ('state', models.CharField(choices=[('PREPARING', 'Подготавливается'), ('CREATED', 'Создан'), ('CONFIRMED', 'Подтвержден'), ('ASSEMBLED', 'Собран'), ('SENT', 'Отправлен'), ('DELIVERED', 'Доставлен'), ('CANCELED', 'Отменен')], default='PREPARING', verbose_name='Состояние заказа')),
                ('contact', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='backend.contact', verbose_name='Контакт')),
                ('coupon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.coupon', verbose_name='Купон')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Список заказов',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Название продукта')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='backend.category')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Список продуктов',
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='ProductItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('article_id', models.IntegerField(blank=True, null=True, verbose_name='Артикул товара')),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)], verbose_name='Количество')),
                ('preview', models.ImageField(blank=True, null=True, upload_to='images/%Y/%m/%d', verbose_name='Превью')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Цена продукта')),
                ('price_retail', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Розничная цена продукта')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_items', to='backend.product', verbose_name='Продукт')),
            ],
            options={
                'verbose_name': 'Описание продукта',
                'verbose_name_plural': 'Список описаний продуктов',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1, verbose_name='Количество')),
                ('order', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ordered_items', to='backend.order', verbose_name='Заказ')),
                ('product_item', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='ordered_items', to='backend.productitem', verbose_name='Экземпляр продукта')),
            ],
            options={
                'verbose_name': 'Позиция заказа',
                'verbose_name_plural': 'Список позиций заказа',
            },
        ),
        migrations.CreateModel(
            name='ProductProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100, verbose_name='Значение свойства')),
                ('product_item', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_properties', to='backend.productitem')),
                ('property', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_properties', to='backend.property')),
            ],
            options={
                'verbose_name': 'Свойства продукта',
                'verbose_name_plural': 'Список  свойств продукта',
            },
        ),
        migrations.CreateModel(
            name='Shop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название магазина')),
                ('url', models.URLField(blank=True, max_length=300, null=True, verbose_name='Ссылка на файл продуктов магазина')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание магазина')),
                ('is_active', models.BooleanField(default=False)),
                ('user', models.OneToOneField(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='shop', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Магазин',
                'verbose_name_plural': 'Список магазинов',
                'ordering': ['-name'],
            },
        ),
        migrations.AddField(
            model_name='productitem',
            name='shop',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_items', to='backend.shop', verbose_name='Магазин'),
        ),
        migrations.AddField(
            model_name='category',
            name='shops',
            field=models.ManyToManyField(blank=True, related_name='categories', to='backend.shop', verbose_name='Магазины'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-name'], name='backend_pro_name_2fc2a9_idx'),
        ),
        migrations.AddConstraint(
            model_name='orderitem',
            constraint=models.UniqueConstraint(fields=('order', 'product_item'), name='unique_order_item'),
        ),
        migrations.AddConstraint(
            model_name='productproperty',
            constraint=models.UniqueConstraint(fields=('product_item', 'property'), name='unique_product_properties'),
        ),
        migrations.AddIndex(
            model_name='shop',
            index=models.Index(fields=['-name'], name='backend_sho_name_594518_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['-name'], name='backend_cat_name_073360_idx'),
        ),
    ]
